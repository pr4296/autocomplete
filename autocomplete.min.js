class RelevanceArray{arr;_maxSize;constructor(maxSize=5){this.arr=[];this._maxSize=maxSize}
_findIndex(data){return this._findIndexRecurse(data,0,this.arr.length)}
_findIndexRecurse(data,l,r){if(l>=r)return l;var m=parseInt(l+(r-l)/2);if(data.relevance>this.arr[m].relevance){return this._findIndexRecurse(data,l,m-1)}
else if(data.relevance<this.arr[m].relevance){return this._findIndexRecurse(data,m+1,r)}
return m}
_findWord(data){return this.arr.filter(e=>(e.word===data))}
add(data){var index=this._findIndex(data);if(this._findWord(data).length>0){console.log('removing word',data);if(this.arr[index].relevance===data.relevance)return;this.arr.splice(index,1)}
this.arr.splice(index,0,data)}
get(){var includedSet=new Set();var retArr=[];var i=0;this.arr=this.arr.sort(function(a,b){if(a.relevance!==b.relevance){return b.relevance-a.relevance}
return a.word>b.word?1:-1});while(i<this.arr.length){if(includedSet.has(this.arr[i].word)){i++;continue}
includedSet.add(this.arr[i].word);retArr.push(this.arr[i]);i++}
return retArr}}
class TrieNode{_data;_isWord;_children;_suggestions;_relevance;constructor(data){this._data=data;this._isWord=!1;this._children={};this._suggestions=new RelevanceArray();this._relevance=1}}
class Trie{_root;constructor(){this._root=new TrieNode('')}
addKey(word,key,relevance=1){if(!this._root)return null;this._addNode(this._root,word,key,0,relevance)}
_addNode(node,word,key,index,relevance){if(!node||!key||index>=key.length)return null;var letter=key.charAt(index).toLowerCase();var child=node._children[letter];if(!child){child=new TrieNode(letter);node._children[letter]=child}
child._suggestions.add({'word':word,'relevance':relevance});if(key.length-1==index){child.isWord=!0;return}
this._addNode(child,word,key,index+1,relevance)}
find(word){var node=this._root;var found=!0;for(const letter of word){if(node._children[letter]){node=node._children[letter]}
else{found=!1;break}}
return found?node:null}
printByLevel(){if(!this._root){return console.log('No root node found')}
var newline=new TrieNode('\n');var queue=[this._root,newline];var string='';while(queue.length){var node=queue.shift();string+=node._data.toString()+(node._data!=='\n'?' ':'');if(node===newline&&queue.length){queue.push(newline)}
for(var child in node._children){if(node._children.hasOwnProperty(child)){queue.push(node._children[child])}}}}}
var RelevanceEnum=Object.freeze({"FullName":100,"OtherNames":5,"Substring":1});class Autocomplete{_trie;constructor(terms){this._createTrie(terms)}
_createTrie(terms){this._trie=new Trie();for(var i in terms){this._trie.addKey(terms[i])}
this.loadWordsFromArr(terms)}
getSuggestions(word){word=word.toLowerCase();var node=this._trie.find(word);if(node!=null){return node._suggestions.get()}
return[]}
_getAllSubstringsMinSize(str,size){var i,j,result=[];size=(size||0);for(i=0;i<str.length;i++){for(j=str.length;j-i>=size;j--){result.push(str.slice(i,j))}}
return result}
loadWordsFromArr(arr){if(arr===null||arr.length===0)return;for(var i in arr){var fullname=arr[i];this._trie.addKey(fullname,fullname,RelevanceEnum.FullName);var arrKeys=fullname.split(" ");for(var j in arrKeys)
{var key=arrKeys[j];this._trie.addKey(fullname,key,RelevanceEnum.OtherNames);var substrings=this._getAllSubstringsMinSize(key,1);for(var k in substrings){this._trie.addKey(fullname,substrings[k],100-key.length)}}}}}